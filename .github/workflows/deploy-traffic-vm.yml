name: Deploy Traffic Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/deploy-traffic-vm.yml'
      - 'cmd/**'
      - 'internal/**'
  workflow_dispatch:
    inputs:
      vm_name:
        description: 'Name for the Traffic VM'
        required: false
        default: 'traffic-vm'
      machine_type:
        description: 'Machine type for the VM'
        required: false
        default: 'e2-micro'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE: simple-traffic
  REGION: us-central1
  ZONE: us-central1-a

jobs:
  build-and-deploy-container:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Build and Push to Artifact Registry
      run: |-
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }} ./
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}


  deploy-traffic-vm:
    runs-on: ubuntu-latest
    needs: build-and-deploy-container

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Delete and Create Traffic VM
      run: |
        VM_NAME="${{ github.event.inputs.vm_name || 'traffic-vm' }}"
        MACHINE_TYPE="${{ github.event.inputs.machine_type || 'e2-micro' }}"
        
        # Always delete existing instance if it exists
        if gcloud compute instances describe $VM_NAME --zone=${{ env.ZONE }} >/dev/null 2>&1; then
          echo "Deleting existing instance"
          gcloud compute instances delete $VM_NAME --zone=${{ env.ZONE }} --quiet || echo "Delete failed, instance may already be gone"
          
          # Wait for deletion to complete
          echo "Waiting for deletion to complete..."
          while gcloud compute instances describe $VM_NAME --zone=${{ env.ZONE }} >/dev/null 2>&1; do
            echo "Still deleting..."
            sleep 5
          done
          echo "Instance deleted successfully"
        else
          echo "No existing instance found, proceeding with creation"
        fi
        
        # Create VM
        echo "Creating new Traffic VM: $VM_NAME"
        gcloud compute instances create $VM_NAME \
          --zone=${{ env.ZONE }} \
          --machine-type=$MACHINE_TYPE \
          --image-family=ubuntu-2204-lts \
          --image-project=ubuntu-os-cloud \
          --boot-disk-size=50GB \
          --boot-disk-type=pd-standard \
          --tags=traffic-vm,http-server,https-server \
          --scopes=https://www.googleapis.com/auth/cloud-platform
        
        # Wait and verify VM is ready
        echo "Waiting for VM to be ready..."
        for i in {1..12}; do
          if gcloud compute ssh $VM_NAME --zone=${{ env.ZONE }} --command="echo 'VM ready'" >/dev/null 2>&1; then
            echo "VM is ready and SSH accessible"
            break
          fi
          echo "Waiting for SSH... ($i/12)"
          sleep 10
        done
        
        # Final check
        if ! gcloud compute ssh $VM_NAME --zone=${{ env.ZONE }} --command="echo 'VM ready'" >/dev/null 2>&1; then
          echo "Error: VM not ready after 2 minutes"
          exit 1
        fi

    - name: Install Dependencies on VM
      run: |
        VM_NAME="${{ github.event.inputs.vm_name || 'traffic-vm' }}"
        
        # Install all dependencies
        gcloud compute ssh $VM_NAME --zone=${{ env.ZONE }} --command="
          # Update system
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip curl wget jq docker.io
          
          # Start Docker
          sudo systemctl start docker
          sudo systemctl enable docker
          
          # Install Node.js 18.x
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo bash -
          sudo apt-get install -y nodejs
          
          # Install mitmproxy
          sudo pip3 install mitmproxy
          
          # Install Claude Code CLI
          echo 'Installing Claude Code CLI...'
          sudo npm install -g @anthropic-ai/claude-code
          
          # Add npm global bin to PATH
          NPM_GLOBAL_BIN=\$(npm config get prefix)/bin
          echo 'export PATH=\$PATH:'\$NPM_GLOBAL_BIN | sudo tee -a /etc/profile
          sudo ln -sf \$NPM_GLOBAL_BIN/claude /usr/local/bin/claude
        "

    - name: Deploy Container to Traffic VM
      run: |-
        VM_NAME="${{ github.event.inputs.vm_name || 'traffic-vm' }}"
        
        # Create service account key file locally
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/sa-key.json
        
        # Copy service account key to VM
        gcloud compute scp /tmp/sa-key.json $VM_NAME:/tmp/service-account-key.json --zone=${{ env.ZONE }}
        
        # Deploy container to the traffic VM BEFORE setting up proxy
        echo "Deploying Go service container to $VM_NAME"
        gcloud compute ssh $VM_NAME --zone=${{ env.ZONE }} --command="
          set -e  # Exit on any error
          
          # Authenticate with service account for Docker
          echo 'Configuring Docker authentication...'
          
          # Activate service account on VM
          gcloud auth activate-service-account --key-file=/tmp/service-account-key.json
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
          
          # Clean up key file
          rm -f /tmp/service-account-key.json
          
          # Pull and run new container
          echo 'Pulling container image...'
          sudo docker pull ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}
          
          echo 'Starting container...'
          sudo docker run -d --name simple-traffic --restart=always -p 8081:8080 \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}
          
          # Verify container is running
          if sudo docker ps | grep -q simple-traffic; then
            echo 'Container deployed and running successfully'
          else
            echo 'Error: Container failed to start'
            sudo docker logs simple-traffic || true
            exit 1
          fi
        "
        
        # Clean up local key file
        rm -f /tmp/sa-key.json

    - name: Setup Traffic Scripts and Rules
      run: |
        VM_NAME="${{ github.event.inputs.vm_name || 'traffic-vm' }}"
        
        # Copy all traffic files to VM
        gcloud compute scp --zone=${{ env.ZONE }} --recurse ./vm-scripts/ $VM_NAME:/tmp/
        
        gcloud compute ssh $VM_NAME --zone=${{ env.ZONE }} --command="
          # Create traffic user first
          sudo useradd -m -s /bin/bash traffic || echo 'User already exists'
          
          # Create directories
          sudo mkdir -p /opt/traffic/certs
          sudo chown -R traffic:traffic /opt/traffic
          
          # List what was actually copied
          echo 'Files copied to /tmp/vm-scripts:'
          ls -la /tmp/vm-scripts/ || echo 'Directory not found'
          
          # Move traffic script
          sudo mv /tmp/vm-scripts/traffic_script.py /opt/traffic/traffic_script.py
          sudo chown traffic:traffic /opt/traffic/traffic_script.py
          
          # Move shell scripts to traffic directory
          sudo mv /tmp/vm-scripts/setup-iptables.sh /opt/traffic/setup-iptables.sh
          sudo mv /tmp/vm-scripts/clear-iptables.sh /opt/traffic/clear-iptables.sh
          sudo mv /tmp/vm-scripts/start-proxy.sh /opt/traffic/start-proxy.sh
          sudo mv /tmp/vm-scripts/cleanup-logs.sh /opt/traffic/cleanup-logs.sh
          
          # Set permissions
          sudo chmod +x /opt/traffic/*.sh
          
          # Apply iptables rules immediately
          sudo /opt/traffic/setup-iptables.sh
        "

    - name: Start Traffic Proxy
      run: |
        VM_NAME="${{ github.event.inputs.vm_name || 'traffic-vm' }}"
        
        # Configure environment and start traffic proxy
        gcloud compute ssh $VM_NAME --zone=${{ env.ZONE }} --command="
          set -e  # Exit on any error
          
          # Configure NODE_EXTRA_CA_CERTS for Node.js applications
          echo 'NODE_EXTRA_CA_CERTS=/opt/traffic/certs/mitmproxy-ca-cert.pem' | sudo tee -a /etc/environment
          
          # Start traffic proxy in background
          echo 'Starting traffic proxy...'
          nohup sudo /opt/traffic/start-proxy.sh > /tmp/traffic-startup.log 2>&1 &
          
          # Wait for proxy to start with retry loop
          echo 'Waiting for traffic proxy to start...'
          for i in {1..12}; do
            if pgrep -f mitmdump > /dev/null; then
              echo 'Traffic proxy started successfully'
              break
            fi
            echo \"Attempt $i/12: Waiting 5 seconds...\"
            sleep 5
          done
          
          # Final check
          if ! pgrep -f mitmdump > /dev/null; then
            echo 'Error: Traffic proxy failed to start after 60 seconds'
            exit 1
          fi
          
          # Wait for certificates to be generated by mitmdump
          echo 'Waiting for certificates to be generated...'
          for i in {1..12}; do
            if [ -f '/opt/traffic/certs/mitmproxy-ca-cert.pem' ]; then
              echo 'Certificates generated successfully'
              break
            fi
            echo \"Attempt $i/12: Waiting 5 seconds for certificate generation...\"
            sleep 5
          done
          
          # Install certificates after they are generated
          echo 'Installing traffic CA certificate to system trust store...'
          if [ -f '/opt/traffic/certs/mitmproxy-ca-cert.pem' ]; then
            sudo cp /opt/traffic/certs/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy-ca-cert.crt
            sudo update-ca-certificates
            echo 'Certificates installed successfully'
          else
            echo 'Error: Certificate file not found after 60 seconds'
            exit 1
          fi
        "

    - name: Create firewall rules
      run: |
        # Delete existing firewall rules if they exist
        echo "Cleaning up existing firewall rules..."
        gcloud compute firewall-rules delete allow-ssh-traffic --quiet 2>/dev/null || echo "SSH rule doesn't exist"
        gcloud compute firewall-rules delete allow-http-https-traffic --quiet 2>/dev/null || echo "HTTP/HTTPS rule doesn't exist"
        
        # Allow SSH access
        echo "Creating SSH firewall rule..."
        gcloud compute firewall-rules create allow-ssh-traffic \
          --allow tcp:22 \
          --source-ranges 0.0.0.0/0 \
          --target-tags traffic-vm \
          --description "Allow SSH to Traffic VM"
        
        # Allow HTTP/HTTPS for testing and Go service
        echo "Creating HTTP/HTTPS firewall rule..."
        gcloud compute firewall-rules create allow-http-https-traffic \
          --allow tcp:80,tcp:443,tcp:8080,tcp:8081 \
          --source-ranges 0.0.0.0/0 \
          --target-tags traffic-vm \
          --description "Allow HTTP/HTTPS and Go service to Traffic VM"

    - name: Cleanup
      run: rm -f startup-script.sh